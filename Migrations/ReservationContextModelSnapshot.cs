// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservationProject.Data;

namespace ReservationProject.Migrations
{
    [DbContext(typeof(ReservationContext))]
    partial class ReservationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReservationProject.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Motive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityofPerson")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("LocationID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("ReservationProject.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Location");
                });

            modelBuilder.Entity("ReservationProject.Models.Osoba", b =>
                {
                    b.Property<int>("OsobaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPhone")
                        .HasColumnType("int");

                    b.HasKey("OsobaID");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Osoba");
                });

            modelBuilder.Entity("ReservationProject.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CostPerDay")
                        .HasColumnType("real");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationPeriodinDays")
                        .HasColumnType("int");

                    b.Property<string>("StatusOfReservation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TheDateOfMakeReserve")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TheLastPaymentsDay")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationID");

                    b.HasIndex("EventId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ReservationProject.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Competencies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionWorker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ReservationProject.Models.PrivateEvent", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Event");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PrivateEvent");
                });

            modelBuilder.Entity("ReservationProject.Models.PublicEvent", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Event");

                    b.Property<string>("ArtShow")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PublicEvent");
                });

            modelBuilder.Entity("ReservationProject.Models.Bar", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Location");

                    b.Property<string>("Alkohols")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Bar");
                });

            modelBuilder.Entity("ReservationProject.Models.Park", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Location");

                    b.Property<bool>("LegalProtection")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Park");
                });

            modelBuilder.Entity("ReservationProject.Models.Restaurant", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Location");

                    b.Property<string>("Cuisine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Decoration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KindOfRoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Restaurant");
                });

            modelBuilder.Entity("ReservationProject.Models.Klients", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Osoba");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Klients");
                });

            modelBuilder.Entity("ReservationProject.Models.Worker", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Osoba");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("NettoPerHour")
                        .HasColumnType("real");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("WorkHours")
                        .HasColumnType("int");

                    b.HasIndex("ServiceID");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("ReservationProject.Models.LegalPerson", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Klients");

                    b.Property<float>("Budget")
                        .HasColumnType("real");

                    b.Property<float>("Iban")
                        .HasColumnType("real");

                    b.Property<string>("NameOfCompany")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("LegalPerson");
                });

            modelBuilder.Entity("ReservationProject.Models.PhysicalPerson", b =>
                {
                    b.HasBaseType("ReservationProject.Models.Klients");

                    b.Property<float>("IndividualNumberofAccount")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("PhysicalPerson");
                });

            modelBuilder.Entity("ReservationProject.Models.Event", b =>
                {
                    b.HasOne("ReservationProject.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationProject.Models.Service", "Service")
                        .WithMany("Events")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ReservationProject.Models.Reservation", b =>
                {
                    b.HasOne("ReservationProject.Models.Event", "Event")
                        .WithMany("Reservations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ReservationProject.Models.Worker", b =>
                {
                    b.HasOne("ReservationProject.Models.Service", "Service")
                        .WithMany("Workers")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ReservationProject.Models.Event", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ReservationProject.Models.Location", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ReservationProject.Models.Service", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
